{"version":3,"sources":["components/common/daily-card/daily-row/DailyRow.module.css","components/ui/loader/Loader.module.css","components/App.module.css","utils/constants.ts","utils/getWeekday.ts","components/ui/icon/svg/LightRain.tsx","components/ui/icon/icons-list.ts","components/ui/icon/svg/Calendar.tsx","components/ui/icon/svg/Rain.tsx","components/ui/icon/svg/HeavyRain.tsx","components/ui/icon/svg/NightCloudy.tsx","components/ui/icon/svg/Thunder.tsx","components/ui/icon/svg/Clouds.tsx","components/ui/icon/svg/Snow.tsx","components/ui/icon/svg/Fog.tsx","components/ui/icon/svg/ClearSky.tsx","utils/getIconName.ts","utils/formatTemperature.ts","utils/formatDate.ts","utils/buildClassName.ts","components/common/header/Header.tsx","components/ui/icon/Icon.tsx","components/ui/card/Card.tsx","components/common/hourly-card/HourlyCard.tsx","utils/formatTime.ts","components/common/daily-card/daily-row/DailyRow.tsx","components/common/daily-card/utils/getGradientValues.ts","components/common/daily-card/DailyCard.tsx","components/common/daily-card/utils/findRangeForPeriod.ts","api/api-client.ts","api/mappers/mapApiResponse.ts","utils/head.ts","components/ui/loader/Loader.tsx","components/App.tsx","hooks/useDynamicBackgorund.ts","hooks/useWeatherData.ts","components/ErrorBoundary.tsx","serviceWorkerRegistration.ts","index.tsx","components/common/header/Header.module.css","components/common/hourly-card/HourlyCard.module.css","components/ui/card/Card.module.css"],"names":["module","exports","DEFAULT_VALUE","CURRENT_DAY","CURRENT_TIME","weekdays","LightRain","_jsx","width","height","viewBox","fill","xmlns","children","d","strictCodeIcons","generalCodeIcons","iconsList","calendar","rain","thunder","clouds","preserveAspectRatio","version","stroke","strokeWidth","fillRule","drizzle","snow","fog","getIconName","code","toString","formatTemperature","temp","concat","formatDate","date","Date","getDate","getDay","getWeekday","buildClassName","_len","arguments","length","parts","Array","_key","filter","Boolean","join","Header","_ref","_ref$city","city","tempMax","tempMin","weather","_jsxs","className","styles","header","description","range","Icon","name","Card","title","_ref$kind","kind","card","HourlyCard","items","slice","map","_ref2","datetime","id","time","iconName","item","getHours","padStart","DailyRow","currentTemp","_useState","useState","_useState2","_slicedToArray","values","setGradientValues","precip","useEffect","gradientValues","_ref$range","min","max","todayMin","todayMax","Error","percent","left","right","current","getGradientValues","row","conditions","Number","probability","style","_defineProperty","DailyCard","setRange","periodRange","period","data","Math","apply","_toConsumableArray","el","findRangeForPeriod","api","axios","create","baseURL","process","getCurrentWeather","lat","lon","params","key","get","getHourlyWeather","getDailyWeather","_x","_x2","_getDailyWeather","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","mapApiResponse","array","currentResponse","hourlyResponse","dailyResponse","daily","i","valid_date","round","min_temp","max_temp","pop","response","today","curr","city_name","mapCurrentApiResponse","undefined","hourly","responseData","timestamp_local","mapHourlyApiResponse","Loader","loader","App","root","document","querySelector","gradient","getGradientByTime","background","_useWeatherData","coords","setCoords","_useState3","_useState4","hourlyForecast","setHourlyForecast","_useState5","_useState6","dailyForecast","setDailyForecast","_useState7","_useState8","currentWeather","setCurrentWeather","_useState9","_useState10","isLoading","setIsLoading","navigator","geolocation","getCurrentPosition","console","error","enableHighAccuracy","maximumAge","Infinity","storedCurrent","localStorage","getItem","storedDaily","storedHourly","timestamp","JSON","parse","latitude","longitude","_getWeather","_yield$Promise$all","_yield$Promise$all2","_mapApiResponse","Promise","all","sent","setItem","stringify","now","t0","finish","useWeatherData","_Fragment","_objectSpread","main","ErrorBoundary","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","args","call","state","hasError","_createClass","value","info","componentStack","this","props","React","Component","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","dotenv","rootElement","getElementById","createRoot","render","StrictMode","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ce8e7424.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"DailyRow_row__bPE0s\",\"time\":\"DailyRow_time__1EJZS\",\"conditions\":\"DailyRow_conditions__KgmPr\",\"temp\":\"DailyRow_temp__HRDzH\",\"min\":\"DailyRow_min__3I48T\",\"max\":\"DailyRow_max__2aL9D\",\"probability\":\"DailyRow_probability__W0RKM\",\"range\":\"DailyRow_range__2k9uG\",\"range-meter\":\"DailyRow_range-meter__9ZHOS\",\"range-current\":\"DailyRow_range-current__26hEj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1saMS\",\"dual-ring\":\"Loader_dual-ring__2JdHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__jNC5T\"};","export const DEFAULT_VALUE = \"-\";\n\nexport const CURRENT_LOCATION = \"Current location\";\n\nexport const CURRENT_DAY = \"Today\";\n\nexport const CURRENT_TIME = \"Now\";\n\nexport const DEGREE_SYMBOL = \"°\";\n","const weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] as const;\n\nexport type Weekday = (typeof weekdays)[number];\n\nexport function getWeekday(date: string): Weekday {\n  return weekdays[new Date(date).getDay()];\n}\n","import React from 'react';\n\nexport const LightRain = () => (\n  <svg\n    width=\"32\"\n    height=\"31\"\n    viewBox=\"0 0 32 31\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M20.4844 4.17969C21.0107 4.17969 21.4512 3.72852 21.4512 3.20215V0.978516C21.4512 0.441406 21.0107 0.000976562 20.4844 0.000976562C19.9473 0.000976562 19.5068 0.441406 19.5068 0.978516V3.20215C19.5068 3.72852 19.9473 4.17969 20.4844 4.17969ZM14.1035 6.25293C14.4902 6.63965 15.1133 6.62891 15.4785 6.25293C15.8438 5.8877 15.8545 5.27539 15.4785 4.89941L13.8994 3.29883C13.5234 2.92285 12.9004 2.93359 12.5352 3.29883C12.1592 3.6748 12.1592 4.29785 12.5352 4.67383L14.1035 6.25293ZM25.4795 6.26367C25.8447 6.62891 26.4785 6.63965 26.8545 6.25293L28.4336 4.67383C28.8096 4.29785 28.8096 3.6748 28.4336 3.30957C28.0576 2.93359 27.4453 2.93359 27.0693 3.30957L25.4795 4.89941C25.1035 5.26465 25.1143 5.8877 25.4795 6.26367ZM23.3418 15.835C24.8887 14.793 25.8555 13.1494 25.8555 11.248C25.8555 8.27246 23.46 5.87695 20.4844 5.87695C18.5186 5.87695 16.8105 6.91895 15.9189 8.46582C16.3809 8.93848 16.7783 9.4541 17.1113 10.0879C20.6025 10.3564 22.9873 12.5908 23.3418 15.835ZM4.63965 22.0332H16.5635C19.625 22.0332 21.9883 19.7021 21.9883 16.6729C21.9883 13.6221 19.5605 11.334 16.2842 11.3232C15.0703 9.00293 12.8574 7.49902 10.0752 7.49902C6.50879 7.49902 3.50098 10.249 3.17871 13.8369C1.32031 14.374 0.12793 15.9531 0.12793 17.8867C0.12793 20.3467 1.96484 22.0332 4.63965 22.0332ZM28.5195 12.2148H30.7432C31.2803 12.2148 31.71 11.7852 31.71 11.2588C31.71 10.7217 31.2803 10.2812 30.7432 10.2812H28.5195C27.9932 10.2812 27.542 10.7217 27.542 11.2588C27.542 11.7852 27.9932 12.2148 28.5195 12.2148ZM27.0693 19.208C27.4453 19.584 28.0576 19.584 28.4336 19.208C28.7988 18.832 28.7988 18.2197 28.4229 17.8438L26.8438 16.2646C26.4678 15.8994 25.8555 15.8887 25.4795 16.2646C25.1035 16.6406 25.1035 17.2529 25.4795 17.6289L27.0693 19.208ZM13.2227 27.2539L14.6084 24.8584C14.8232 24.5039 14.7158 24.0957 14.3613 23.8916C14.0176 23.6875 13.6201 23.8057 13.4053 24.1602L12.0195 26.5771C11.8154 26.9102 11.9121 27.3184 12.2666 27.5225C12.6104 27.7158 13.0293 27.5977 13.2227 27.2539ZM4.68262 27.2646L6.06836 24.8691C6.27246 24.5146 6.16504 24.1064 5.82129 23.9023C5.4668 23.6982 5.06934 23.8164 4.86523 24.1709L3.46875 26.5879C3.27539 26.9209 3.36133 27.3291 3.72656 27.5332C4.07031 27.7266 4.48926 27.6084 4.68262 27.2646ZM16.5957 30.2725L17.9814 27.877C18.1855 27.5225 18.0781 27.1143 17.7344 26.9102C17.3799 26.7061 16.9932 26.8242 16.7783 27.1787L15.3818 29.5957C15.1885 29.9287 15.2852 30.3369 15.6396 30.541C15.9834 30.7344 16.4023 30.6162 16.5957 30.2725ZM8.04492 30.2832L9.43066 27.8877C9.64551 27.5332 9.53809 27.125 9.18359 26.9209C8.83984 26.7168 8.44238 26.835 8.22754 27.1895L6.8418 29.6064C6.6377 29.9395 6.73438 30.3477 7.08887 30.5518C7.43262 30.7451 7.85156 30.627 8.04492 30.2832Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\n","import { Calendar } from \"./svg/Calendar\";\nimport { ClearSky } from \"./svg/ClearSky\";\nimport { Clouds } from \"./svg/Clouds\";\nimport { Fog } from \"./svg/Fog\";\nimport { HeavyRain } from \"./svg/HeavyRain\";\nimport { LightRain } from \"./svg/LightRain\";\nimport { NightCloudy } from \"./svg/NightCloudy\";\nimport { Rain } from \"./svg/Rain\";\nimport { Snow } from \"./svg/Snow\";\nimport { Thunder } from \"./svg/Thunder\";\n\nexport const strictCodeIcons: Record<string, TIconName> = {\n  500: \"light-rain\",\n  502: \"heavy-rain\",\n  800: \"clear-sky\",\n  801: \"clear-sky\",\n};\n\nexport const generalCodeIcons: Record<string, TIconName> = {\n  2: \"thunder\",\n  3: \"drizzle\",\n  5: \"rain\",\n  6: \"snow\",\n  7: \"fog\",\n  8: \"clouds\",\n};\n\nexport const iconsList = {\n  calendar: Calendar,\n  rain: Rain,\n  \"heavy-rain\": HeavyRain,\n  \"light-rain\": LightRain,\n  \"night-cloudy\": NightCloudy,\n  thunder: Thunder,\n  clouds: Clouds,\n  drizzle: LightRain,\n  snow: Snow,\n  fog: Fog,\n  \"clear-sky\": ClearSky,\n};\n\nexport type TIconName = keyof typeof iconsList;\n","import React from \"react\";\n\nexport const Calendar = () => {\n  return (\n    <svg\n      width=\"16\"\n      height=\"15\"\n      viewBox=\"0 0 16 15\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M3.27002 14.5601H13.3481C14.9302 14.5601 15.7505 13.7397 15.7505 12.1797V3.26611C15.7505 1.69873 14.9302 0.885742 13.3481 0.885742H3.27002C1.68799 0.885742 0.867676 1.69873 0.867676 3.26611V12.1797C0.867676 13.7471 1.68799 14.5601 3.27002 14.5601ZM3.24805 13.1245C2.64014 13.1245 2.30322 12.8022 2.30322 12.165V5.39746C2.30322 4.75293 2.64014 4.43799 3.24805 4.43799H13.3555C13.9707 4.43799 14.3149 4.75293 14.3149 5.39746V12.165C14.3149 12.8022 13.9707 13.1245 13.3555 13.1245H3.24805ZM6.89551 6.97949H7.32764C7.59131 6.97949 7.6792 6.89893 7.6792 6.63525V6.21045C7.6792 5.94678 7.59131 5.86621 7.32764 5.86621H6.89551C6.63916 5.86621 6.55127 5.94678 6.55127 6.21045V6.63525C6.55127 6.89893 6.63916 6.97949 6.89551 6.97949ZM9.29785 6.97949H9.72266C9.98633 6.97949 10.0742 6.89893 10.0742 6.63525V6.21045C10.0742 5.94678 9.98633 5.86621 9.72266 5.86621H9.29785C9.03418 5.86621 8.94629 5.94678 8.94629 6.21045V6.63525C8.94629 6.89893 9.03418 6.97949 9.29785 6.97949ZM11.6929 6.97949H12.1177C12.3813 6.97949 12.4692 6.89893 12.4692 6.63525V6.21045C12.4692 5.94678 12.3813 5.86621 12.1177 5.86621H11.6929C11.4292 5.86621 11.3413 5.94678 11.3413 6.21045V6.63525C11.3413 6.89893 11.4292 6.97949 11.6929 6.97949ZM4.50049 9.33789H4.93262C5.19629 9.33789 5.28418 9.25732 5.28418 8.99365V8.56885C5.28418 8.30518 5.19629 8.22461 4.93262 8.22461H4.50049C4.24414 8.22461 4.15625 8.30518 4.15625 8.56885V8.99365C4.15625 9.25732 4.24414 9.33789 4.50049 9.33789ZM6.89551 9.33789H7.32764C7.59131 9.33789 7.6792 9.25732 7.6792 8.99365V8.56885C7.6792 8.30518 7.59131 8.22461 7.32764 8.22461H6.89551C6.63916 8.22461 6.55127 8.30518 6.55127 8.56885V8.99365C6.55127 9.25732 6.63916 9.33789 6.89551 9.33789ZM9.29785 9.33789H9.72266C9.98633 9.33789 10.0742 9.25732 10.0742 8.99365V8.56885C10.0742 8.30518 9.98633 8.22461 9.72266 8.22461H9.29785C9.03418 8.22461 8.94629 8.30518 8.94629 8.56885V8.99365C8.94629 9.25732 9.03418 9.33789 9.29785 9.33789ZM11.6929 9.33789H12.1177C12.3813 9.33789 12.4692 9.25732 12.4692 8.99365V8.56885C12.4692 8.30518 12.3813 8.22461 12.1177 8.22461H11.6929C11.4292 8.22461 11.3413 8.30518 11.3413 8.56885V8.99365C11.3413 9.25732 11.4292 9.33789 11.6929 9.33789ZM4.50049 11.6963H4.93262C5.19629 11.6963 5.28418 11.6157 5.28418 11.3521V10.9272C5.28418 10.6636 5.19629 10.583 4.93262 10.583H4.50049C4.24414 10.583 4.15625 10.6636 4.15625 10.9272V11.3521C4.15625 11.6157 4.24414 11.6963 4.50049 11.6963ZM6.89551 11.6963H7.32764C7.59131 11.6963 7.6792 11.6157 7.6792 11.3521V10.9272C7.6792 10.6636 7.59131 10.583 7.32764 10.583H6.89551C6.63916 10.583 6.55127 10.6636 6.55127 10.9272V11.3521C6.55127 11.6157 6.63916 11.6963 6.89551 11.6963ZM9.29785 11.6963H9.72266C9.98633 11.6963 10.0742 11.6157 10.0742 11.3521V10.9272C10.0742 10.6636 9.98633 10.583 9.72266 10.583H9.29785C9.03418 10.583 8.94629 10.6636 8.94629 10.9272V11.3521C8.94629 11.6157 9.03418 11.6963 9.29785 11.6963Z\"\n        fill=\"white\"\n      />\n    </svg>\n  );\n};\n","import React from 'react';\n\nexport const Rain = () => (\n  <svg\n    width=\"26\"\n    height=\"27\"\n    viewBox=\"0 0 26 27\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.12207 17.4004H19.5068C23.1055 17.4004 25.8018 14.6719 25.8018 11.2666C25.8018 7.76465 22.9766 5.17578 19.292 5.17578C17.9707 2.57617 15.5107 0.814453 12.2559 0.814453C8.1416 0.814453 4.80078 3.9834 4.40332 7.99023C2.41602 8.58105 0.922852 10.2998 0.922852 12.6201C0.922852 15.2842 2.86719 17.4004 6.12207 17.4004ZM15.0059 22.5674L16.3916 20.1719C16.5957 19.8174 16.4883 19.4092 16.1445 19.2051C15.79 19.001 15.3926 19.1191 15.1885 19.4736L13.792 21.8906C13.5986 22.2236 13.6846 22.6318 14.0498 22.8359C14.3936 23.04 14.8125 22.9111 15.0059 22.5674ZM6.45508 22.5781L7.84082 20.1826C8.04492 19.8281 7.9375 19.4199 7.59375 19.2158C7.23926 19.0117 6.85254 19.1299 6.6377 19.4844L5.24121 21.9014C5.04785 22.2344 5.14453 22.6426 5.49902 22.8467C5.84277 23.04 6.26172 22.9219 6.45508 22.5781ZM18.3682 25.5967L19.7539 23.1904C19.9688 22.8467 19.8613 22.4277 19.5068 22.2236C19.1631 22.0303 18.7656 22.1377 18.5508 22.5029L17.165 24.9199C16.9609 25.2529 17.0576 25.6611 17.4121 25.8652C17.7559 26.0586 18.1748 25.9297 18.3682 25.5967ZM9.82812 25.5967L11.2139 23.2012C11.418 22.8574 11.3105 22.4385 10.9668 22.2344C10.6123 22.0303 10.2148 22.1484 10.0107 22.5137L8.61426 24.9199C8.4209 25.2529 8.50684 25.6719 8.87207 25.876C9.21582 26.0693 9.63477 25.9404 9.82812 25.5967Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const HeavyRain = () => (\n  <svg\n    width=\"26\"\n    height=\"27\"\n    viewBox=\"0 0 26 27\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.12207 17.4004H19.5068C23.1055 17.4004 25.8018 14.6719 25.8018 11.2666C25.8018 7.76465 22.9766 5.17578 19.292 5.17578C17.9707 2.57617 15.5107 0.814453 12.2559 0.814453C8.1416 0.814453 4.80078 3.9834 4.40332 7.99023C2.41602 8.58105 0.922852 10.2998 0.922852 12.6201C0.922852 15.2842 2.86719 17.4004 6.12207 17.4004ZM8.60352 25.6289L11.751 20.1826C11.9551 19.8281 11.8477 19.4199 11.5039 19.2158C11.1494 19.0225 10.752 19.1299 10.5479 19.4951L7.40039 24.9521C7.20703 25.2852 7.29297 25.6934 7.64746 25.8975C7.99121 26.0908 8.41016 25.9727 8.60352 25.6289ZM4.32812 25.6289L7.46484 20.1826C7.66895 19.8281 7.56152 19.4307 7.21777 19.2266C6.86328 19.0225 6.47656 19.1299 6.26172 19.4951L3.11426 24.9521C2.9209 25.2852 3.00684 25.6934 3.36133 25.8975C3.71582 26.0908 4.12402 25.9727 4.32812 25.6289ZM12.8789 25.6289L16.0264 20.1826C16.2305 19.8281 16.123 19.4307 15.7793 19.2266C15.4248 19.0225 15.0273 19.1299 14.8232 19.4951L11.665 24.9521C11.4824 25.2852 11.5684 25.6934 11.9229 25.8975C12.2666 26.0908 12.6855 25.9727 12.8789 25.6289ZM17.1328 25.6396L20.3018 20.1719C20.4951 19.8281 20.3984 19.4092 20.0547 19.2158C19.7109 19.0332 19.3027 19.1299 19.0986 19.4844L15.9619 24.9307C15.7578 25.2852 15.8545 25.6934 16.1982 25.8975C16.5205 26.0908 16.9502 25.9727 17.1328 25.6396Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const NightCloudy = () => (\n  <svg\n    width=\"29\"\n    height=\"20\"\n    viewBox=\"0 0 29 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M23.3311 13.4668C26.6611 12.8115 28.6484 10.083 28.6484 8.28906C28.6484 7.84863 28.4551 7.53711 28.1006 7.53711C27.5527 7.53711 26.7578 8.21387 25.2539 8.21387C22.6543 8.22461 21.0215 6.64551 21.0215 4.27148C21.0215 2.81055 21.752 1.75781 21.752 1.16699C21.752 0.823242 21.5156 0.597656 21.0859 0.608398C19.1309 0.683594 16.5312 2.875 15.9297 5.78613C16.2949 6.12988 16.6387 6.58105 16.918 7.17188C20.4629 7.41895 23.1914 10.1152 23.3311 13.4668ZM4.58594 19.2139H16.499C19.5713 19.2139 21.9346 16.8721 21.9346 13.8428C21.9346 10.792 19.4961 8.51465 16.2305 8.50391C15.0059 6.17285 12.8037 4.67969 10.0215 4.67969C6.45508 4.67969 3.44727 7.41895 3.125 11.0068C1.25586 11.5439 0.0634766 13.123 0.0634766 15.0566C0.0634766 17.5273 1.90039 19.2139 4.58594 19.2139Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\n","import React from 'react';\n\nexport const Thunder = () => (\n  <svg\n    width=\"26\"\n    height=\"28\"\n    viewBox=\"0 0 26 28\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.12207 17.4004H19.5068C23.1055 17.4004 25.8018 14.6719 25.8018 11.2666C25.8018 7.76465 22.9766 5.17578 19.292 5.17578C17.9707 2.57617 15.5107 0.814453 12.2559 0.814453C8.1416 0.814453 4.80078 3.9834 4.40332 7.99023C2.41602 8.58105 0.922852 10.2998 0.922852 12.6201C0.922852 15.2842 2.86719 17.4004 6.12207 17.4004ZM16.1016 21.375H13.8242L14.8447 19.4092C14.9736 19.1729 14.877 18.9902 14.6406 18.9902H12.1162C11.8154 18.9902 11.6973 19.0977 11.6006 19.3232L10.1074 22.7178C10 22.9863 10.1074 23.1475 10.3975 23.1475H12.2988L10.8379 26.6816C10.7842 26.8213 10.8164 26.9502 10.9131 26.9932C11.0098 27.0254 11.1279 27.0039 11.2461 26.8857L16.2627 21.9121C16.499 21.6758 16.4131 21.375 16.1016 21.375Z\"\n      fill=\"white\"\n    />\n  </svg>\n);\n","import React from \"react\";\n\nexport const Clouds = () => {\n  return (\n    <svg\n      width=\"30px\"\n      viewBox=\"0 9 40 40\"\n      preserveAspectRatio=\"xMinYMin slice\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n        <g fill=\"white\" fillRule=\"nonzero\">\n          <path d=\"M26.0033786,14.0178101 C32.3404408,14.0178101 35.9353483,18.2123909 36.4581772,23.2780629 L36.6181097,23.2780577 C40.6962691,23.2780577 44.0022704,26.5755054 44.0022704,30.6431133 C44.0022704,34.7107212 40.6962691,38.0081689 36.6181097,38.0081689 L15.3886475,38.0081689 C11.3104881,38.0081689 8.00448675,34.7107212 8.00448675,30.6431133 C8.00448675,26.5755054 11.3104881,23.2780577 15.3886925,23.2780577 L15.54858,23.2780629 C16.0744503,18.1790956 19.6663164,14.0178101 26.0033786,14.0178101 Z M20,8 C23.2338046,8 26.098966,9.63065426 27.8007336,12.1246115 C27.218525,12.0536129 26.6178803,12.0178101 26,12.0178101 C19.9222797,12.0178101 15.5238614,15.4557322 14.0398458,20.632476 L13.9604067,20.9218509 L13.8447188,21.3973673 L13.4315161,21.4742626 C10.2153218,22.1482179 7.59969978,24.4749628 6.5261155,27.5337322 C4.9890769,26.3342105 4,24.4620981 4,22.3589744 C4,18.7337206 6.93884882,15.7948718 10.5641426,15.7948718 L10.7062735,15.7948764 C11.4846533,11.3522177 15.3634074,8 20,8 Z\"></path>\n        </g>\n      </g>\n    </svg>\n  );\n};\n","import React from \"react\";\n\nexport const Snow = () => {\n  return (\n    <svg\n      fill=\"white\"\n      width=\"20px\"\n      viewBox=\"0 0 50 50\"\n      preserveAspectRatio=\"xMinYMin slice\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M 12.2618 35.1133 L 41.3477 35.1133 C 48.7772 35.1133 54.5195 29.5117 54.5195 22.2930 C 54.5195 15.0039 48.5195 9.5430 40.5743 9.6133 C 37.5743 3.5664 32.0665 .7 25.5743 .7 C 16.9259 .7 9.6368 6.8945 8.9571 15.6367 C 4.4102 16.8789 1.4805 20.7226 1.4805 25.3164 C 1.4805 31.1289 5.8399 35.1133 12.2618 35.1133 Z M 13.4102 47.1133 C 13.8321 47.1133 14.1368 46.7148 14.1134 46.2930 L 13.9727 44.0430 L 15.8243 45.3086 C 16.1759 45.5430 16.6915 45.4492 16.9259 45.0977 C 17.1368 44.7461 17.0196 44.2070 16.5508 43.9961 L 14.5586 43.0117 L 16.5743 42.0039 C 17.0196 41.7930 17.1134 41.3008 16.9493 40.9258 C 16.7383 40.5508 16.1759 40.4805 15.8243 40.7148 L 13.9727 42.0039 L 14.1368 39.7539 C 14.1837 39.3086 13.8321 38.9102 13.4102 38.9102 C 12.9181 38.9102 12.6368 39.3086 12.6602 39.7539 L 12.8008 42.0039 L 10.9259 40.7148 C 10.5743 40.4805 10.0821 40.5273 9.8477 40.9258 C 9.6368 41.3008 9.7305 41.7930 10.1759 42.0039 L 12.1915 43.0117 L 10.1759 43.9961 C 9.7305 44.2070 9.6134 44.7227 9.8243 45.0977 C 10.0352 45.4727 10.5743 45.5430 10.9259 45.3320 L 12.8008 44.0664 L 12.6837 46.2930 C 12.6602 46.7148 12.9181 47.1133 13.4102 47.1133 Z M 39.3790 47.1133 C 39.8008 47.1133 40.1055 46.7148 40.0821 46.2930 L 39.9181 44.0430 L 41.7930 45.3086 C 42.1212 45.5430 42.6602 45.4492 42.8946 45.0977 C 43.1055 44.7461 42.9883 44.2070 42.5196 43.9961 L 40.5040 43.0117 L 42.5430 42.0039 C 42.9883 41.7930 43.0821 41.3008 42.9181 40.9258 C 42.7071 40.5508 42.1212 40.4805 41.7930 40.7148 L 39.9181 42.0039 L 40.1055 39.7539 C 40.1524 39.3086 39.8008 38.9102 39.3790 38.9102 C 38.8868 38.9102 38.6055 39.3086 38.6290 39.7539 L 38.7696 42.0039 L 36.8712 40.7148 C 36.5430 40.4805 36.0508 40.5273 35.8165 40.9258 C 35.6055 41.3008 35.6993 41.7930 36.1446 42.0039 L 38.1602 43.0117 L 36.1446 43.9961 C 35.6993 44.2070 35.5821 44.7227 35.7930 45.0977 C 36.0040 45.4727 36.5430 45.5430 36.8712 45.3320 L 38.7696 44.0664 L 38.6524 46.2930 C 38.6290 46.7148 38.8868 47.1133 39.3790 47.1133 Z M 26.3946 47.1133 C 26.8165 47.1133 27.1212 46.7148 27.0977 46.2930 L 26.9571 44.0430 L 28.8086 45.3086 C 29.1368 45.5430 29.6759 45.4492 29.9102 45.0977 C 30.1212 44.7461 30.0040 44.2070 29.5352 43.9961 L 27.5430 43.0117 L 29.5586 42.0039 C 30.0040 41.7930 30.0977 41.3008 29.9337 40.9258 C 29.7227 40.5508 29.1368 40.4805 28.8086 40.7148 L 26.9571 42.0039 L 27.1212 39.7539 C 27.1681 39.3086 26.8165 38.9102 26.3946 38.9102 C 25.9024 38.9102 25.6212 39.3086 25.6446 39.7539 L 25.7852 42.0039 L 23.9102 40.7148 C 23.5586 40.4805 23.0665 40.5273 22.8321 40.9258 C 22.6212 41.3008 22.7149 41.7930 23.1602 42.0039 L 25.1759 43.0117 L 23.1602 43.9961 C 22.7149 44.2070 22.5977 44.7227 22.8086 45.0977 C 23.0196 45.4727 23.5586 45.5430 23.9102 45.3320 L 25.7852 44.0664 L 25.6681 46.2930 C 25.6446 46.7148 25.9024 47.1133 26.3946 47.1133 Z M 21.3086 55.9023 C 21.7305 55.9023 22.0352 55.5039 22.0118 55.0820 L 21.8712 52.8555 L 23.7227 54.1211 C 24.0508 54.3320 24.5899 54.2383 24.8243 53.8867 C 25.0352 53.5352 24.9181 52.9961 24.4493 52.7852 L 22.4571 51.8242 L 24.4727 50.8164 C 24.9181 50.6055 25.0118 50.0899 24.8477 49.7383 C 24.6368 49.3633 24.0508 49.2930 23.7227 49.5039 L 21.8712 50.8164 L 22.0352 48.5430 C 22.0821 48.0977 21.7305 47.7226 21.3086 47.7226 C 20.8165 47.7226 20.5352 48.0977 20.5586 48.5430 L 20.6993 50.8164 L 18.8243 49.5039 C 18.4727 49.2930 17.9805 49.3399 17.7462 49.7383 C 17.5352 50.0899 17.6290 50.5820 18.0743 50.8164 L 20.0899 51.8242 L 18.0743 52.8086 C 17.6290 53.0195 17.5118 53.5117 17.7227 53.8867 C 17.9337 54.2852 18.4727 54.3555 18.8243 54.1211 L 20.6993 52.8555 L 20.5821 55.0820 C 20.5586 55.5039 20.8165 55.9023 21.3086 55.9023 Z M 8.3243 55.9023 C 8.7462 55.9023 9.0508 55.5039 9.0274 55.0820 L 8.8868 52.8555 L 10.7383 54.1211 C 11.0899 54.3320 11.6055 54.2383 11.8399 53.8867 C 12.0508 53.5352 11.9337 52.9961 11.4649 52.7852 L 9.4727 51.8242 L 11.4883 50.8164 C 11.9337 50.6055 12.0274 50.0899 11.8634 49.7383 C 11.6524 49.3633 11.0899 49.2930 10.7383 49.5039 L 8.8868 50.8164 L 9.0508 48.5430 C 9.0977 48.0977 8.7462 47.7226 8.3243 47.7226 C 7.8321 47.7226 7.5508 48.0977 7.5743 48.5430 L 7.7149 50.8164 L 5.8399 49.5039 C 5.4883 49.2930 4.9962 49.3399 4.7618 49.7383 C 4.5508 50.0899 4.6446 50.5820 5.0899 50.8164 L 7.1290 51.8242 L 5.0899 52.8086 C 4.6446 53.0195 4.5274 53.5117 4.7383 53.8867 C 4.9493 54.2852 5.4883 54.3555 5.8399 54.1211 L 7.7149 52.8555 L 7.5977 55.0820 C 7.5743 55.5039 7.8321 55.9023 8.3243 55.9023 Z M 34.2930 55.9023 C 34.7149 55.9023 35.0196 55.5039 34.9962 55.0820 L 34.8555 52.8555 L 36.7071 54.1211 C 37.0352 54.3320 37.5743 54.2383 37.8086 53.8867 C 38.0196 53.5352 37.9024 52.9961 37.4337 52.7852 L 35.4181 51.8242 L 37.4571 50.8164 C 37.9024 50.6055 37.9962 50.0899 37.8321 49.7383 C 37.6212 49.3633 37.0352 49.2930 36.7071 49.5039 L 34.8555 50.8164 L 35.0196 48.5430 C 35.0665 48.0977 34.7149 47.7226 34.2930 47.7226 C 33.8008 47.7226 33.5196 48.0977 33.5430 48.5430 L 33.6837 50.8164 L 31.7852 49.5039 C 31.4571 49.2930 30.9649 49.3399 30.7305 49.7383 C 30.5196 50.0899 30.6134 50.5820 31.0586 50.8164 L 33.0743 51.8242 L 31.0586 52.8086 C 30.6134 53.0195 30.4962 53.5117 30.7071 53.8867 C 30.9181 54.2852 31.4571 54.3555 31.7852 54.1211 L 33.6837 52.8555 L 33.5665 55.0820 C 33.5430 55.5039 33.8008 55.9023 34.2930 55.9023 Z\" />\n    </svg>\n  );\n};\n","import React from \"react\";\n\nexport const Fog = () => {\n  return (\n    <svg\n      fill=\"white\"\n      width=\"26px\"\n      preserveAspectRatio=\"xMinYMin slice\"\n      viewBox=\"0 0 56 56\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M 12.2618 36.7187 L 41.3477 36.7187 C 48.7772 36.7187 54.5195 31.0937 54.5195 23.8984 C 54.5195 16.6094 48.5195 11.1484 40.5743 11.2187 C 37.5743 5.1719 32.0665 1.6797 25.5743 1.6797 C 16.9259 1.6797 9.6368 8.5 8.9571 17.2422 C 4.4102 18.4844 1.4805 22.3047 1.4805 26.9219 C 1.4805 32.7344 5.8399 36.7187 12.2618 36.7187 Z M 43.4805 43.3984 L 12.9883 43.3984 C 12.1681 43.3984 11.5118 44.0312 11.5118 44.8984 C 11.5118 45.7422 12.1681 46.3750 12.9883 46.3750 L 43.4805 46.3750 C 44.3008 46.3750 44.9571 45.7422 44.9571 44.8984 C 44.9571 44.0312 44.3008 43.3984 43.4805 43.3984 Z M 43.4805 51.3672 L 12.9883 51.3672 C 12.1681 51.3672 11.5118 52 11.5118 52.8437 C 11.5118 53.6875 12.1681 54.3203 12.9883 54.3203 L 43.4805 54.3203 C 44.3008 54.3203 44.9571 53.6875 44.9571 52.8437 C 44.9571 52 44.3008 51.3672 43.4805 51.3672 Z\" />\n    </svg>\n  );\n};\n","import React from \"react\";\n\nexport const ClearSky = () => {\n  return (\n    <svg\n      width=\"25\"\n      height=\"25\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M13.9531 1.35156C13.9531 0.760742 13.459 0.266602 12.8789 0.266602C12.2881 0.266602 11.7939 0.760742 11.7939 1.35156V3.54297C11.7939 4.12305 12.2881 4.61719 12.8789 4.61719C13.459 4.61719 13.9531 4.12305 13.9531 3.54297V1.35156ZM18.25 5.3584C17.8418 5.7666 17.8418 6.4541 18.2607 6.87305C18.6689 7.28125 19.3672 7.29199 19.7861 6.8623L21.333 5.31543C21.752 4.89648 21.7412 4.19824 21.333 3.7793C20.9248 3.37109 20.2266 3.38184 19.8184 3.79004L18.25 5.3584ZM5.96094 6.8623C6.36914 7.28125 7.06738 7.28125 7.47559 6.87305C7.89453 6.47559 7.89453 5.75586 7.49707 5.3584L5.93945 3.79004C5.54199 3.39258 4.83301 3.37109 4.4248 3.7793C4.0166 4.19824 4.00586 4.89648 4.41406 5.30469L5.96094 6.8623ZM12.8682 6.59375C9.78516 6.59375 7.22852 9.15039 7.22852 12.2441C7.22852 15.3379 9.78516 17.8945 12.8682 17.8945C15.9512 17.8945 18.5078 15.3379 18.5078 12.2441C18.5078 9.15039 15.9512 6.59375 12.8682 6.59375ZM23.75 13.3184C24.3301 13.3184 24.8242 12.8242 24.8242 12.2441C24.8242 11.6533 24.3301 11.1699 23.75 11.1699H21.5693C20.9893 11.1699 20.4951 11.6533 20.4951 12.2441C20.4951 12.8242 20.9893 13.3184 21.5693 13.3184H23.75ZM1.99707 11.1699C1.41699 11.1699 0.922852 11.6533 0.922852 12.2441C0.922852 12.8242 1.41699 13.3184 1.99707 13.3184H4.17773C4.76855 13.3184 5.2627 12.8242 5.2627 12.2441C5.2627 11.6533 4.76855 11.1699 4.17773 11.1699H1.99707ZM19.7754 17.626C19.3672 17.2178 18.6689 17.2178 18.25 17.626C17.8418 18.0449 17.8418 18.7324 18.2607 19.1514L19.8184 20.709C20.2373 21.1172 20.9248 21.1064 21.3438 20.6875C21.752 20.2793 21.752 19.5918 21.333 19.1729L19.7754 17.626ZM4.41406 19.1621C3.99512 19.5811 3.99512 20.2793 4.39258 20.6875C4.81152 21.0957 5.50977 21.1064 5.91797 20.6982L7.47559 19.1514C7.89453 18.7324 7.89453 18.0449 7.49707 17.6367C7.07812 17.2178 6.37988 17.2178 5.96094 17.626L4.41406 19.1621ZM13.9531 20.9453C13.9531 20.3652 13.459 19.8711 12.8789 19.8711C12.2881 19.8711 11.7939 20.3652 11.7939 20.9453V23.1367C11.7939 23.7168 12.2881 24.2217 12.8789 24.2217C13.459 24.2217 13.9531 23.7168 13.9531 23.1367V20.9453Z\"\n        fill=\"#F8D74A\"\n      />\n    </svg>\n  );\n};\n","import {\n  TIconName,\n  generalCodeIcons,\n  strictCodeIcons,\n} from \"components/ui/icon/icons-list\";\n\nexport function getIconName(code: number): TIconName | undefined {\n  if (strictCodeIcons[code]) return strictCodeIcons[code];\n\n  return generalCodeIcons[code.toString()[0]];\n}\n","import { DEFAULT_VALUE, DEGREE_SYMBOL } from \"./constants\";\n\nexport function formatTemperature(temp?: number): string {\n  if (typeof temp !== \"number\") return DEFAULT_VALUE;\n\n  return `${temp}${DEGREE_SYMBOL}`;\n}\n","import { CURRENT_DAY } from \"./constants\";\nimport { Weekday, getWeekday } from \"./getWeekday\";\n\nexport function formatDate(date: string): Weekday | string {\n  return new Date(date).getDate() === new Date().getDate()\n    ? CURRENT_DAY\n    : getWeekday(date);\n}\n","type Parts = (string | false | undefined)[];\n\nexport function buildClassName(...parts: Parts): string {\n  return parts.filter(Boolean).join(\" \");\n}\n","import React from \"react\";\nimport { TCurrentData } from \"types/CurrentData\";\nimport { CURRENT_LOCATION, DEFAULT_VALUE, formatTemperature } from \"utils\";\n\nimport styles from \"./Header.module.css\";\n\ntype HeaderProps = TCurrentData;\n\nexport const Header: React.FC<HeaderProps> = ({\n  city = CURRENT_LOCATION,\n  temp,\n  tempMax,\n  tempMin,\n  weather,\n}) => {\n  return (\n    <header className={styles.header}>\n      <h1 className=\"title-h1\">{city}</h1>\n      <span className={styles.temp}>{temp || DEFAULT_VALUE}</span>\n      <span className={styles.description}>{weather ?? DEFAULT_VALUE}</span>\n      <span className={styles.range}>\n        <span>H:{formatTemperature(tempMax)}</span>\n        <span>L:{formatTemperature(tempMin)}</span>\n      </span>\n    </header>\n  );\n};\n","import React from \"react\";\nimport { TIconName, iconsList } from \"./icons-list\";\n\ninterface IconProps {\n  name: TIconName;\n}\n\nexport const Icon: React.FC<IconProps> = ({ name }) => {\n  return iconsList[name]();\n};\n","import React, { ReactNode } from \"react\";\n\nimport styles from \"./Card.module.css\";\n\nimport { buildClassName } from \"utils\";\nimport { Icon } from \"../icon\";\n\ninterface CardProps {\n  title: string;\n  children: ReactNode;\n  kind?: \"horizontal\" | \"vertical\";\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  title,\n  children,\n  kind = \"vertical\",\n  className,\n}) => {\n  return (\n    <div className={buildClassName(styles.card, className)}>\n      <h2 className=\"title-h2\">\n        <Icon name=\"calendar\" />\n        {title}\n      </h2>\n      <div className={styles[`list-${[kind]}`]}>{children}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Icon } from \"components/ui/icon\";\nimport { TIntervalData } from \"types\";\nimport { DEFAULT_VALUE, formatTemperature, formatTime } from \"utils\";\nimport { Card } from \"components/ui/card\";\n\nimport styles from \"./HourlyCard.module.css\";\n\ninterface ForecastProps {\n  items?: TIntervalData[];\n}\n\nexport const HourlyCard: React.FC<ForecastProps> = ({ items }) => {\n  return (\n    <Card title=\"Hourly forecast\" kind=\"horizontal\" className={styles.card}>\n      {items?.slice(0, 25).map(({ id, temp, time, iconName }) => (\n        <div key={id} className={styles.item}>\n          <span className={styles.time}>\n            {formatTime(time) || DEFAULT_VALUE}\n          </span>\n          {iconName ? <Icon name={iconName} /> : DEFAULT_VALUE}\n          <span className={styles.temp}>{formatTemperature(temp)}</span>\n        </div>\n      ))}\n    </Card>\n  );\n};\n","import { CURRENT_TIME } from \"./constants\";\n\nexport function formatTime(datetime?: string): string {\n  if (!datetime) return \"\";\n\n  if (datetime === CURRENT_TIME) return datetime;\n\n  return new Date(datetime).getHours().toString().padStart(2, \"0\");\n}\n","import React, { CSSProperties, useEffect, useState } from \"react\";\n\nimport { TDailyData } from \"types\";\nimport { Icon } from \"components/ui/icon\";\nimport { DEFAULT_VALUE, formatTemperature } from \"utils\";\nimport { TPeriodRange } from \"components/common/daily-card/types/PeriodRange\";\nimport { getGradientValues } from \"../utils/getGradientValues\";\nimport { TGradientValues } from \"../types/GradientBoundaries\";\n\nimport styles from \"./DailyRow.module.css\";\n\ninterface GradientProperties extends CSSProperties {\n  \"--left\": string;\n  \"--right\": string;\n  \"--current\": string;\n}\n\ninterface DailyRowProps {\n  item: TDailyData;\n  range?: TPeriodRange;\n  currentTemp?: number;\n}\n\nexport const DailyRow: React.FC<DailyRowProps> = ({\n  item,\n  range,\n  currentTemp,\n}) => {\n  const [values, setGradientValues] = useState<TGradientValues>();\n  const { time, iconName, precip, tempMin, tempMax } = item;\n\n  useEffect(() => {\n    if (!range) return;\n\n    const gradientValues = getGradientValues({\n      range,\n      currentTemp,\n      todayMin: tempMin,\n      todayMax: tempMax,\n    });\n    setGradientValues(gradientValues);\n  }, [currentTemp, range, tempMax, tempMin]);\n\n  return (\n    <div className={styles.row}>\n      <div className={styles.time}>{time}</div>\n      <div className={styles.conditions}>\n        {iconName ? <Icon name={iconName} /> : DEFAULT_VALUE}\n        {Number(precip) >= 20 ? (\n          <span className={styles.probability}>{precip}%</span>\n        ) : null}\n      </div>\n      <div className={styles.temp}>\n        <span className={styles.min}>{formatTemperature(tempMin)}</span>\n        <span\n          style={\n            {\n              [\"--left\"]: `${values?.left}%`,\n              [\"--right\"]: `${values?.right}%`,\n              [\"--current\"]: `${values?.current}%`,\n            } as GradientProperties\n          }\n          className={styles.range}\n        >\n          <span className={styles[\"range-meter\"]} />\n          <span className={styles[\"range-current\"]} />\n        </span>\n        <span className={styles.max}>{formatTemperature(tempMax)}</span>\n      </div>\n    </div>\n  );\n};\n","import { TGradientValues } from \"../types/GradientBoundaries\";\nimport { TPeriodRange } from \"../types/PeriodRange\";\n\ninterface GetGradientValuesParams {\n  range: TPeriodRange;\n  todayMin: number;\n  todayMax: number;\n  currentTemp?: number;\n}\n\nexport function getGradientValues({\n  range: { min, max },\n  todayMin,\n  todayMax,\n  currentTemp,\n}: GetGradientValuesParams): TGradientValues {\n  if (min > max || todayMin > todayMax) {\n    throw new Error(\"min temperature must be less than max\");\n  }\n\n  const percent = (max - min) / 100;\n  const leftStart = todayMin - min;\n  const rightStart = max - todayMax;\n\n  const left = leftStart / percent;\n  const right = rightStart / percent;\n\n  if (typeof currentTemp !== \"number\") {\n    return { left, right };\n  }\n\n  const currentStart = currentTemp - min;\n  const current = currentStart / percent;\n\n  return { left, right, current };\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { TDailyData } from \"types\";\nimport { Card } from \"components/ui/card\";\nimport { findRangeForPeriod } from \"./utils/findRangeForPeriod\";\nimport { DailyRow } from \"./daily-row\";\nimport { TPeriodRange } from \"components/common/daily-card/types/PeriodRange\";\n\ninterface DailyProps {\n  items?: TDailyData[];\n  currentTemp?: number;\n}\n\nexport const DailyCard: React.FC<DailyProps> = ({ items, currentTemp }) => {\n  const [range, setRange] = useState<TPeriodRange>();\n\n  useEffect(() => {\n    if (!items) return;\n\n    const periodRange = findRangeForPeriod(items, 10);\n    setRange(periodRange);\n  }, [items]);\n\n  return (\n    <Card title=\"10-day forecast\">\n      {items?.slice(0, 10).map((item) => (\n        <DailyRow\n          key={item.id}\n          item={item}\n          range={range}\n          currentTemp={currentTemp}\n        />\n      ))}\n    </Card>\n  );\n};\n","import { TDailyData } from \"types\";\nimport { TPeriodRange } from \"components/common/daily-card/types/PeriodRange\";\n\nexport function findRangeForPeriod(\n  items: TDailyData[],\n  period: number\n): TPeriodRange {\n  if (period > items.length) {\n    throw Error(\"period must not exceed the number of days\");\n  }\n\n  const data = items.slice(0, period);\n\n  const min = Math.min(...data.map((el) => el.tempMin));\n  const max = Math.max(...data.map((el) => el.tempMax));\n\n  return { min, max };\n}\n","import axios from \"axios\";\nimport {\n  GetCurrentResponse,\n  GetDailyResponse,\n  GetHourlyResponse,\n} from \"./types\";\n\nconst api = axios.create({ baseURL: process.env.REACT_APP_API_URL });\n\nexport function getCurrentWeather(\n  lat: number,\n  lon: number\n): Promise<GetCurrentResponse> {\n  const params = {\n    key: process.env.REACT_APP_API_KEY,\n    lat,\n    lon,\n  };\n\n  return api.get(\"/current\", { params });\n}\n\nexport function getHourlyWeather(\n  lat: number,\n  lon: number\n): Promise<GetHourlyResponse> {\n  const params = {\n    key: process.env.REACT_APP_API_KEY,\n    lat,\n    lon,\n  };\n\n  return api.get(\"/forecast/hourly\", { params });\n}\n\nexport async function getDailyWeather(\n  lat: number,\n  lon: number\n): Promise<GetDailyResponse> {\n  const params = {\n    key: process.env.REACT_APP_API_KEY,\n    lat,\n    lon,\n  };\n\n  return api.get(\"/forecast/daily\", { params });\n}\n","import {\n  GetCurrentResponse,\n  GetDailyResponse,\n  GetHourlyResponse,\n} from \"api/types\";\nimport { CURRENT_TIME, head, getIconName, formatDate } from \"utils\";\n\nimport { TDailyData, TCurrentData, TIntervalData } from \"types\";\n\nfunction mapHourlyApiResponse(\n  response: GetHourlyResponse,\n  current: TCurrentData\n): TIntervalData[] {\n  const responseData = response.data.data.map((i) => ({\n    id: i.timestamp_local,\n    temp: Math.round(i.temp),\n    time: i.timestamp_local,\n    precip: i.pop,\n    weather: i.weather.description,\n    iconName: getIconName(i.weather.code),\n  }));\n\n  return [\n    {\n      id: CURRENT_TIME,\n      time: CURRENT_TIME,\n      temp: current.temp,\n      weather: current.weather,\n      iconName: current.iconName,\n    },\n    ...responseData,\n  ];\n}\n\nfunction mapDailyApiResponse(response: GetDailyResponse): TDailyData[] {\n  return response.data.data.map((i) => ({\n    id: i.valid_date,\n    tempMin: Math.round(i.min_temp),\n    tempMax: Math.round(i.max_temp),\n    temp: Math.round(i.temp),\n    time: formatDate(i.valid_date),\n    precip: i.pop,\n    weather: i.weather.description,\n    iconName: getIconName(i.weather.code),\n  }));\n}\n\nfunction mapCurrentApiResponse(\n  response: GetCurrentResponse,\n  today?: TDailyData\n): TCurrentData {\n  const curr = response.data.data[0];\n  return {\n    city: curr.city_name,\n    temp: Math.round(curr.temp),\n    weather: curr.weather.description,\n    tempMax: today?.tempMax,\n    tempMin: today?.tempMin,\n    iconName: getIconName(curr.weather.code),\n  };\n}\n\nexport function mapApiResponse({\n  currentResponse,\n  hourlyResponse,\n  dailyResponse,\n}: {\n  currentResponse: GetCurrentResponse;\n  hourlyResponse: GetHourlyResponse;\n  dailyResponse: GetDailyResponse;\n}): { current: TCurrentData; daily: TDailyData[]; hourly: TIntervalData[] } {\n  const daily = mapDailyApiResponse(dailyResponse);\n  const current = mapCurrentApiResponse(currentResponse, head(daily));\n  const hourly = mapHourlyApiResponse(hourlyResponse, current);\n\n  return { current, daily, hourly };\n}\n","export function head<T>(array: T[]): T | undefined {\n  return array != null && array.length ? array[0] : undefined;\n}\n","import React, { FC } from \"react\";\n\nimport styles from \"./Loader.module.css\";\n\nexport const Loader: FC = () => {\n  return <div className={styles.loader} />;\n};\n","import React, { FC } from \"react\";\nimport \"../style.css\";\nimport { Header } from \"./common/header\";\nimport { HourlyCard } from \"./common/hourly-card\";\nimport { DailyCard } from \"./common/daily-card\";\nimport { useWeatherData } from \"hooks/useWeatherData\";\nimport { useDynamicBackgorund } from \"hooks/useDynamicBackgorund\";\nimport { Loader } from \"./ui/loader/Loader\";\n\nimport styles from \"./App.module.css\";\n\nconst App: FC = () => {\n  useDynamicBackgorund();\n  const { currentWeather, hourlyForecast, dailyForecast, isLoading } =\n    useWeatherData();\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <Header {...currentWeather} />\n      <main className={styles.main}>\n        <HourlyCard items={hourlyForecast} />\n        <DailyCard items={dailyForecast} currentTemp={currentWeather?.temp} />\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import { useEffect } from \"react\";\n\nexport function useDynamicBackgorund(): void {\n  useEffect(() => {\n    const root = document.querySelector<HTMLDivElement>(\"#root\");\n    if (!root) return;\n\n    const currentTime = new Date().getHours();\n    const gradient = getGradientByTime(currentTime);\n\n    root.style.background = `linear-gradient(${gradient})`;\n  }, []);\n}\n\nfunction getGradientByTime(time: number): string {\n  switch (true) {\n    case time >= 5 && time < 11:\n      return \"180deg, #81C5E6 0%, #DC927F 100%\";\n    case time >= 11 && time < 17:\n      return \"180deg, #4982AD 0%, rgba(144, 187, 216, 0.5) 100%\";\n    case time >= 17 && time < 21:\n      return \"180deg, #6F6D8C 0%, rgba(188, 97, 90, 0.5) 100%\";\n    case time >= 21 && time < 5:\n      return \"180deg, #011E33 0%, rgba(61, 53, 81, 0.8) 100%\";\n    default:\n      return \"\";\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport * as api from \"api\";\nimport { TIntervalData, TCurrentData, TDailyData } from \"types\";\nimport { mapApiResponse } from \"api/mappers/mapApiResponse\";\n\nexport function useWeatherData(): {\n  currentWeather?: TCurrentData;\n  hourlyForecast?: TIntervalData[];\n  dailyForecast?: TDailyData[];\n  isLoading: boolean;\n} {\n  const [coords, setCoords] = useState<GeolocationCoordinates>();\n  const [hourlyForecast, setHourlyForecast] = useState<TIntervalData[]>();\n  const [dailyForecast, setDailyForecast] = useState<TDailyData[]>();\n  const [currentWeather, setCurrentWeather] = useState<TCurrentData>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      ({ coords }) => {\n        setCoords(coords);\n      },\n      console.error,\n      { enableHighAccuracy: false, maximumAge: Infinity }\n    );\n  }, []);\n\n  useEffect(() => {\n    const storedCurrent = localStorage.getItem(\"current\");\n    const storedDaily = localStorage.getItem(\"daily\");\n    const storedHourly = localStorage.getItem(\"hourly\");\n    const timestamp = localStorage.getItem(\"timestamp\");\n\n    const isStoredDataActual =\n      new Date(Number(timestamp)).getDate() === new Date().getDate() &&\n      new Date(Number(timestamp)).getHours() === new Date().getHours();\n\n    if (isStoredDataActual && storedCurrent && storedDaily && storedHourly) {\n      setCurrentWeather(JSON.parse(storedCurrent));\n      setDailyForecast(JSON.parse(storedDaily));\n      setHourlyForecast(JSON.parse(storedHourly));\n      setIsLoading(false);\n      return;\n    }\n\n    if (!coords) return;\n    const { latitude, longitude } = coords;\n\n    (async function getWeather() {\n      try {\n        const [currentResponse, hourlyResponse, dailyResponse] =\n          await Promise.all([\n            api.getCurrentWeather(latitude, longitude),\n            api.getHourlyWeather(latitude, longitude),\n            api.getDailyWeather(latitude, longitude),\n          ]);\n\n        const { current, daily, hourly } = mapApiResponse({\n          currentResponse,\n          hourlyResponse,\n          dailyResponse,\n        });\n\n        setCurrentWeather(current);\n        setDailyForecast(daily);\n        setHourlyForecast(hourly);\n\n        localStorage.setItem(\"current\", JSON.stringify(current));\n        localStorage.setItem(\"daily\", JSON.stringify(daily));\n        localStorage.setItem(\"hourly\", JSON.stringify(hourly));\n        localStorage.setItem(\"timestamp\", JSON.stringify(Date.now()));\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [coords]);\n\n  return { currentWeather, hourlyForecast, dailyForecast, isLoading };\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React, { ErrorInfo, ReactNode } from \"react\";\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ServiceErrorBoundaryState {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ServiceErrorBoundaryState\n> {\n  state = { hasError: false };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    console.info(error, info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>error</div>;\n    }\n\n    return this.props.children;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import dotenv from \"dotenv\";\nimport React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./components/App\";\nimport { ErrorBoundary } from \"components/ErrorBoundary\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\ndotenv.config();\n\nconst rootElement = document.getElementById(\"root\") as Element;\n\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </StrictMode>\n);\n\nserviceWorkerRegistration.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3qUJk\",\"temp\":\"Header_temp__bKpNi\",\"description\":\"Header_description__2Ccwg\",\"range\":\"Header_range__uVXnL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"HourlyCard_card__aHEJh\",\"item\":\"HourlyCard_item__mvss1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2PU4w\",\"list-horizontal\":\"Card_list-horizontal__2yr0-\"};"],"sourceRoot":""}